plugins {
    id 'java'
    id 'org.javamodularity.moduleplugin' version '1.8.15'
    id 'maven-publish'
}

group = 'org.firedragon91245.spi'
project.version = releaseVersion

sourceSets {
    testapp {
        java {
            srcDir 'src/testapp/java'
        }
        resources {
            srcDir 'src/testapp/resources'
        }
        compileClasspath += sourceSets.main.output + configurations.testRuntimeClasspath
        runtimeClasspath += output + compileClasspath
    }
}

tasks.register('runTestApp', JavaExec) {
    group = 'application'
    projectDescription = 'Runs the test application to test the SPI implementation.'

    classpath = sourceSets.testapp.runtimeClasspath
    mainClass.set('org.firedragon91245.spi.testapp.Main')

    standardInput = System.in
    standardOutput = System.out
    errorOutput = System.err

    // Capture logs appropriately
    logging.captureStandardOutput LogLevel.LIFECYCLE
    logging.captureStandardError LogLevel.ERROR
}

tasks.register('testappJar', Jar) {
    group = 'build'
    projectDescription = 'Builds the test application as a JAR.'

    from sourceSets.testapp.output
    archiveBaseName.set("${project.name}-testapp-${releaseVersion}")
    destinationDirectory.set(file("${layout.buildDirectory}/libs"))

    manifest {
        attributes(
                'Implementation-Title': "${project.name} TestApp",
                'Implementation-Version': releaseVersion
        )
    }
}

tasks.withType(Copy).configureEach {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

configurations {
    testappImplementation
    testappRuntimeOnly
}

repositories {
    mavenCentral()
}

dependencies {
    implementation("com.googlecode.soundlibs:jorbis:0.0.17.4")
    implementation("com.googlecode.soundlibs:tritonus-share:0.3.7.4")

    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
}

jar {
    from sourceSets.main.output
    archiveFileName = "${project.name}-${releaseVersion}.jar"
    manifest {
        attributes(
                'Implementation-Title': project.name,
                'Implementation-Version': project.version
        )
    }
}

test {
    useJUnitPlatform()
}

// Maven Publish
tasks.register('sourcesJar', Jar) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}

tasks.register('javadocJar', Jar) {
    archiveClassifier.set('javadoc')
    from javadoc
}

javadoc {
    failOnError = false
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            // Attach the sources and Javadoc JARs
            artifact tasks.named('sourcesJar').get()
            artifact tasks.named('javadocJar').get()

            // Customize the generated POM
            pom {
                name = project.name
                description = projectDescription
                url = projectUrl

                licenses {
                    license {
                        name = primaryLicense
                        url = primaryLicenseUrl
                    }
                    license {
                        name = originalLicense
                        url = originalLicenseUrl
                    }
                }

                developers {
                    developer {
                        id = 'FireDragon91245'
                        name = 'FireDragon91245'
                        email = 'firedragon91245@gmail.com'
                    }
                    developer {
                        id = 'JavaZOOM'
                        name = 'JavaZOOM'
                        email = 'vorbisspi@javazoom.net'
                    }
                }

                scm {
                    connection = 'scm:git:git://github.com/FireDragon91245/vorbisspi-repackaged.git'
                    developerConnection = 'scm:git:ssh://git@github.com:FireDragon91245/vorbisspi-repackaged.git'
                    url = projectUrl
                }
            }
        }
    }

    repositories {

    }
}